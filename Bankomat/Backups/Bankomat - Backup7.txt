#include <iostream>
#include <windows.h>
#include <cstdlib>
#include <math.h>
#include <conio.h>
#include <string>
#include <map>

using namespace std;

//  Sizes
const unsigned int GUIX = 47;
const unsigned int GUIY = 20;

//  Corners
const char cr1 = (char)(218);
const char cr2 = (char)(191);
const char cr3 = (char)(192);
const char cr4 = (char)(217);

///---------------------------------GUI TEMPLATES--------------------------------------------------------------------------------------------------------------------------------------------------

char EmptyGUI[GUIY][GUIX] =
{
//   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',    // 0
    ' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',    // 1
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 2
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 3
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 4
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 5
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 6
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 7
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 8
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 9
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 10
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 11
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 12
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 13
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 14
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 15
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 16
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 17
    ' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',    // 18
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '     // 19
};

char StartGUI[GUIY][GUIX] =
{
//   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',    // 0
    ' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',    // 1
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 2
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#',' ',' ','#','#','#','#','#',' ','#','#',' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 3
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 4
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#','#','#','#',' ',' ',' ','#',' ',' ',' ','#',' ','#',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 5
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 6
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 7
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 8
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 9
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 10
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 11
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 12
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 13
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 14
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 15
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 16
    ' ','#','#',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#','#',' ',    // 17
    ' ','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#',' ',    // 18
    ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '     // 19
};

///---------------------------------GLOBAL VALUES--------------------------------------------------------------------------------------------------------------------------------------------------

string Language = "EN";

///---------------------------------TEXTS----------------------------------------------------------------------------------------------------------------------------------------------------------

map<string, string> insertCardText;
map<string, string> adminText;
map<string, string> withdrawText;
map<string, string> depositText;
map<string, string> exitText;
map<string, string> backText;
map<string, string> cardNumberText;
map<string, string> wrongNumberText;
map<string, string> depositMoneyText;
map<string, string> insertMoneyText;

///---------------------------------ACTIONS 1------------------------------------------------------------------------------------------------------------------------------------------------------

void ChangeGUIToStart();
void ChangeGUIToInsertCard();
void placeholderAction();
void placeholderAction2();
void CardInput();

///---------------------------------MAIN CLASSES---------------------------------------------------------------------------------------------------------------------------------------------------

class Box{
protected:
    map<string, string> text;
    map<string, string> placeholderText;
    string type;
    Box *T, *R, *B, *L;
    bool centered, visible, secret, frame, selected;
    unsigned int startX, startY, lenX, lenY;
    void (*ButtonAction)();
    void (*TextLabelAction)(string);

public:
    char** Out;

    Box(){}

    virtual Box* Switch(char side){}

    virtual void setSelect(bool isSelected){}

    virtual string getText(){}

    virtual string getInputedText(){}

    virtual void setText(map<string, string> txt){}

    virtual void inputText(char c){}

    virtual void subInputText(){}

    virtual void setOutput(){}

    virtual void setOutputText(){}

    virtual void printBox(){}

    virtual int getStartX(){}

    virtual int getStartY(){}

    virtual int getLen(){}

    virtual bool isVisible(){}

    virtual void setVisible(bool _visible){}

    virtual void setT(Box *box){}

    virtual void setR(Box *box){}

    virtual void setB(Box *box){}

    virtual void setL(Box *box){}

    virtual void setPlaceholderText(string placeholder){}

    virtual string getType(){}

    virtual void doAction(){}

    virtual ~Box(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; ++i) {
                delete[] Out[i];
            }
            delete[] Out;
        }
    }
};

class Button : public Box{
public:
    Button(unsigned int sx,
            unsigned int sy,
            unsigned int lX,
            bool centeredText = true,
            Box* Top = nullptr,
            Box* Right = nullptr,
            Box* Bottom = nullptr,
            Box* Left = nullptr,
            bool _visible = true,
            bool _secret = false,
            bool haveFrame = true)
    {
        type = "Button";

        visible = _visible;
        secret = _secret;
        frame = haveFrame;
        selected = false;

        T = Top;
        R = Right;
        B = Bottom;
        L = Left;
        centered = centeredText;

        startX = sx;
        startY = sy;
        lenX = lX;
        lenY = 3;

        Out = new char*[lenY];
        for(int i=0; i<3; i++)
            Out[i] = new char[1];
        setOutput();
    }

    Box* Switch(char side){
        switch(side){
        case 'T':
            if(T != nullptr && T->isVisible())
                return T;
            else
                return this;
        case 'R':
            if(R != nullptr && R->isVisible())
                return R;
            else
                return this;
        case 'B':
            if(B != nullptr && B->isVisible())
                return B;
            else
                return this;
        case 'L':
            if(L != nullptr && L->isVisible())
                return L;
            else
                return this;
        default:
            cout<<"ERROR 404 - NO SIDE AS "<<side<<"!"<<endl;
            return this;
        }
    }

    void setSelect(bool isSelected){
        selected = isSelected;
    }

    string getText(){
        return text[Language];
    }

    void setText(map<string, string> txt){
        text = txt;
    }

    void setOutput(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; i++) {
                if (Out[i] != nullptr) {
                    delete[] Out[i];
                    Out[i] = nullptr;
                }
            }
        }
        delete[] Out;

        Out = new char*[lenY];
        for(unsigned int i=0; i<lenY; i++){
            Out[i] = new char[lenX];
                cout<<"!";
            for(unsigned int j=0; j<lenX; j++){
                if(i==0){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr1;
                        else if(j == lenX-1)
                            Out[i][j] = cr2;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else if(i==2){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr3;
                        else if(j == lenX-1)
                            Out[i][j] = cr4;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else{
                    if(j == 0 || j == lenX-1){
                        if(secret || !frame)
                            Out[i][j] = ' ';
                        else
                            Out[i][j] = '|';
                    }
                    else
                        Out[i][j] = ' ';
                }
            }
        }
        setOutputText();
    }

    void setOutputText(){
        int i=0;
        string txt = text[Language], placeholderTxt = placeholderText[Language];
        int len = txt.length();
        int margin = round((lenX-4 - len)/2);

        for(unsigned int j=2; j<lenX-2; j++)
            Out[1][j] = ' ';

        if(len>0){
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = txt[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = txt[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
        }
        else{
            len = placeholderTxt.length();
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
        }
    }

    void printBox(){
        if(visible){
            cout << "\033[" << startY << ";" << startX << "H";
            cout << "\033[7m";
            if(selected)
                cout << "\033[44m";
            for(unsigned int i=0; i<lenY; i++){
                for(unsigned int j=0; j<lenX; j++){
                    cout << Out[i][j];
                }
                cout << "\033[1B" << "\033[" << lenX << "D";
            }
            cout << "\033[0m";
        }
    }

    int getStartX(){
        return startX;
    }

    int getStartY(){
        return startY;
    }

    int getLen(){
        return lenX;
    }

    bool isVisible(){
        return visible;
    }

    void setVisible(bool _visible){
        visible = _visible;
    }

    void setT(Box *box){
        T = box;
    }

    void setR(Box *box){
        R = box;
    }

    void setB(Box *box){
        B = box;
    }

    void setL(Box *box){
        L = box;
    }

    string getType(){
        return type;
    }

    void setButtonAction(void (*newAction)()){
        ButtonAction = newAction;
    }

    void doAction(){
        ButtonAction();
        Sleep(100);
    }


    ~Button(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; ++i) {
                delete[] Out[i];
            }
            delete[] Out;
        }
    }
};

class TextLabel : public Box{
private:
    string inputedText;
public:
    TextLabel(unsigned int sx,
            unsigned int sy,
            unsigned int lX,
            bool centeredText = true,
            Box* Top = nullptr,
            Box* Right = nullptr,
            Box* Bottom = nullptr,
            Box* Left = nullptr,
            bool _visible = true,
            bool _secret = false,
            bool haveFrame = true)
    {
        type = "TextLabel";

        visible = _visible;
        secret = _secret;
        frame = haveFrame;
        selected = false;

        T = Top;
        R = Right;
        B = Bottom;
        L = Left;
        centered = centeredText;

        startX = sx;
        startY = sy;
        lenX = lX;
        lenY = 3;

        Out = new char*[lenY];
        for(int i=0; i<3; i++)
            Out[i] = new char[1];
        setOutput();
    }

    Box* Switch(char side){
        switch(side){
        case 'T':
            if(T != nullptr && T->isVisible())
                return T;
            else
                return this;
        case 'R':
            if(R != nullptr && R->isVisible())
                return R;
            else
                return this;
        case 'B':
            if(B != nullptr && B->isVisible())
                return B;
            else
                return this;
        case 'L':
            if(L != nullptr && L->isVisible())
                return L;
            else
                return this;
        default:
            cout<<"ERROR 404 - NO SIDE AS "<<side<<"!"<<endl;
            return this;
        }
    }

    void setSelect(bool isSelected){
        selected = isSelected;
    }

    string getText(){
        return text[Language];
    }

    string getInputedText(){
        return inputedText;
    }

    void inputText(char c){
        inputedText+=c;
        setOutputText();
    }

    void subInputText(){
        inputedText.pop_back();
        setOutputText();
    }

    void setText(map<string, string> txt){
        text = txt;
    }

    void setOutput(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; i++) {
                if (Out[i] != nullptr) {
                    delete[] Out[i];
                    Out[i] = nullptr;
                }
            }
        }
        delete[] Out;

        Out = new char*[lenY];
        for(unsigned int i=0; i<lenY; i++){
            Out[i] = new char[lenX];
                cout<<"!";
            for(unsigned int j=0; j<lenX; j++){
                if(i==0){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr1;
                        else if(j == lenX-1)
                            Out[i][j] = cr2;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else if(i==2){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr3;
                        else if(j == lenX-1)
                            Out[i][j] = cr4;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else{
                    if(j == 0 || j == lenX-1){
                        if(secret || !frame)
                            Out[i][j] = ' ';
                        else
                            Out[i][j] = '|';
                    }
                    else
                        Out[i][j] = ' ';
                }
            }
        }
        setOutputText();
    }

    void setOutputText(){
        int i=0;
        string placeholderTxt = placeholderText[Language];
        int len = inputedText.length();
        int margin = round((lenX-4 - len)/2);

        for(unsigned int j=2; j<lenX-2; j++)
            Out[1][j] = ' ';

        if(len>0){
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = inputedText[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = inputedText[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
        }
        else{
            len = placeholderTxt.length();
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
        }
    }

    void printBox(){
        if(visible){
            cout << "\033[" << startY << ";" << startX << "H";
            cout << "\033[7m";
            if(selected)
                cout << "\033[44m";
            for(unsigned int i=0; i<lenY; i++){
                for(unsigned int j=0; j<lenX; j++){
                    cout << Out[i][j];
                }
                cout << "\033[1B" << "\033[" << lenX << "D";
            }
            cout << "\033[0m";
        }
    }

    int getStartX(){
        return startX;
    }

    int getStartY(){
        return startY;
    }

    int getLen(){
        return lenX;
    }

    bool isVisible(){
        return visible;
    }

    void setVisible(bool _visible){
        visible = _visible;
    }

    void setT(Box *box){
        T = box;
    }

    void setR(Box *box){
        R = box;
    }

    void setB(Box *box){
        B = box;
    }

    void setL(Box *box){
        L = box;
    }

    void setPlaceholderText(map<string, string> placeholder){
        placeholderText = placeholder;
    }

    string getType(){
        return type;
    }

    void setTextLabelAction(void (*newAction)(string)){
        TextLabelAction = newAction;
    }

    void doAction(){
        TextLabelAction(inputedText);
        Sleep(100);
    }

    ~TextLabel(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; ++i) {
                delete[] Out[i];
            }
            delete[] Out;
        }
    }
};

class TextBox : public Box{
public:
    TextBox(unsigned int sx,
            unsigned int sy,
            unsigned int lX,
            bool centeredText = true,
            Box* Top = nullptr,
            Box* Right = nullptr,
            Box* Bottom = nullptr,
            Box* Left = nullptr,
            bool _visible = true,
            bool _secret = false,
            bool haveFrame = true)
    {
        type = "TextBox";

        visible = _visible;
        secret = _secret;
        frame = haveFrame;
        selected = false;

        T = Top;
        R = Right;
        B = Bottom;
        L = Left;
        centered = centeredText;

        startX = sx;
        startY = sy;
        lenX = lX;
        lenY = 3;

        Out = new char*[lenY];
        for(int i=0; i<3; i++)
            Out[i] = new char[1];
        setOutput();
    }

    Box* Switch(char side){
        switch(side){
        case 'T':
            if(T != nullptr && T->isVisible())
                return T;
            else
                return this;
        case 'R':
            if(R != nullptr && R->isVisible())
                return R;
            else
                return this;
        case 'B':
            if(B != nullptr && B->isVisible())
                return B;
            else
                return this;
        case 'L':
            if(L != nullptr && L->isVisible())
                return L;
            else
                return this;
        default:
            cout<<"ERROR 404 - NO SIDE AS "<<side<<"!"<<endl;
            return this;
        }
    }

    string getText(){
        return text[Language];
    }

    void setText(map<string, string> txt){
        text = txt;
    }

    void setOutput(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; i++) {
                if (Out[i] != nullptr) {
                    delete[] Out[i];
                    Out[i] = nullptr;
                }
            }
        }
        delete[] Out;

        Out = new char*[lenY];
        for(unsigned int i=0; i<lenY; i++){
            Out[i] = new char[lenX];
            for(unsigned int j=0; j<lenX; j++){
                if(i==0){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr1;
                        else if(j == lenX-1)
                            Out[i][j] = cr2;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else if(i==2){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr3;
                        else if(j == lenX-1)
                            Out[i][j] = cr4;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else{
                    if(j == 0 || j == lenX-1){
                        if(secret || !frame)
                            Out[i][j] = ' ';
                        else
                            Out[i][j] = '|';
                    }
                    else
                        Out[i][j] = ' ';
                }
            }
        }
        setOutputText();
    }

    void setOutputText(){
        int i=0;
        string txt = text[Language], placeholderTxt = placeholderText[Language];
        int len = txt.length();
        int margin = round((lenX-4 - len)/2);

        for(unsigned int j=2; j<lenX-2; j++)
            Out[1][j] = ' ';

        if(len>0){
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = txt[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = txt[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
        }
        else{
            len = placeholderTxt.length();
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
        }
    }

    void printBox(){
        if(visible){
            cout << "\033[" << startY << ";" << startX << "H";
            cout << "\033[7m";
            if(selected)
                cout << "\033[44m";
            for(unsigned int i=0; i<lenY; i++){
                for(unsigned int j=0; j<lenX; j++){
                    cout << Out[i][j];
                }
                cout << "\033[1B" << "\033[" << lenX << "D";
            }
            cout << "\033[0m";
        }
    }

    int getStartX(){
        return startX;
    }

    int getStartY(){
        return startY;
    }

    int getLen(){
        return lenX;
    }

    bool isVisible(){
        return visible;
    }

    void setVisible(bool _visible){
        visible = _visible;
    }

    void setT(Box *box){
        T = box;
    }

    void setR(Box *box){
        R = box;
    }

    void setB(Box *box){
        B = box;
    }

    void setL(Box *box){
        L = box;
    }

    string getType(){
        return type;
    }

    ~TextBox(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; ++i) {
                delete[] Out[i];
            }
            delete[] Out;
        }
    }
};

class LangBox : public Box{
private:
    string currentLang = "EN";

public:
    LangBox(unsigned int sx,
            unsigned int sy,
            unsigned int lX,
            bool centeredText = true,
            Box* Top = nullptr,
            Box* Right = nullptr,
            Box* Bottom = nullptr,
            Box* Left = nullptr,
            bool _visible = true,
            bool _secret = false,
            bool haveFrame = true)
    {
        type = "LangBox";
        currentLang = "EN";

        text["EN"] = "EN";
        text["PL"] = "PL";

        visible = _visible;
        secret = _secret;
        frame = haveFrame;
        selected = false;

        T = Top;
        R = Right;
        B = Bottom;
        L = Left;
        centered = centeredText;

        startX = sx;
        startY = sy;
        lenX = lX;
        lenY = 3;

        Out = new char*[lenY];
        for(int i=0; i<3; i++)
            Out[i] = new char[1];
        setOutput();
    }

    changeLang(){
        if(currentLang == "EN")
            currentLang = "PL";
        else
            currentLang = "EN";

        Language = currentLang;
        setPlaceholderText(currentLang);
        setOutputText();
    }

    Box* Switch(char side){
        switch(side){
        case 'T':
            if(T != nullptr && T->isVisible())
                return T;
            else
                return this;
        case 'R':
            if(R != nullptr && R->isVisible())
                return R;
            else
                return this;
        case 'B':
            if(B != nullptr && B->isVisible())
                return B;
            else
                return this;
        case 'L':
            if(L != nullptr && L->isVisible())
                return L;
            else
                return this;
        default:
            cout<<"ERROR 404 - NO SIDE AS "<<side<<"!"<<endl;
            return this;
        }
    }

    void setSelect(bool isSelected){
        selected = isSelected;
    }

    string getText(){
        return text[Language];
    }

    void setOutput(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; i++) {
                if (Out[i] != nullptr) {
                    delete[] Out[i];
                    Out[i] = nullptr;
                }
            }
        }
        delete[] Out;

        Out = new char*[lenY];
        for(unsigned int i=0; i<lenY; i++){
            Out[i] = new char[lenX];
            for(unsigned int j=0; j<lenX; j++){
                if(i==0){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr1;
                        else if(j == lenX-1)
                            Out[i][j] = cr2;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else if(i==2){
                    if(frame){
                        if(j == 0)
                            Out[i][j] = cr3;
                        else if(j == lenX-1)
                            Out[i][j] = cr4;
                        else{
                            if(secret){
                                if((lenX-j)%2==1)
                                    Out[i][j] = '-';
                                else
                                    Out[i][j] = ' ';
                            }
                            else
                                Out[i][j] = '-';
                        }
                    }
                    else{
                        Out[i][j] = ' ';
                    }
                }
                else{
                    if(j == 0 || j == lenX-1){
                        if(secret || !frame)
                            Out[i][j] = ' ';
                        else
                            Out[i][j] = '|';
                    }
                    else
                        Out[i][j] = ' ';
                }
            }
        }
        setOutputText();
    }

    void setOutputText(){
        int i=0;
        string txt = text[Language], placeholderTxt = placeholderText[Language];
        int len = txt.length();
        int margin = round((lenX-4 - len)/2);

        for(unsigned int j=2; j<lenX-2; j++)
            Out[1][j] = ' ';

        if(len>0){
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = txt[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = txt[i];
                        i++;
                    }
                    else
                        Out[1][j] = ' ';
                }
            }
        }
        else{
            len = placeholderTxt.length();
            if(centered){
                for(unsigned int j=2+margin; j<lenX-2; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
            else{
                for(int j = 2; j<lenX-3; j++){
                    if(i<len){
                        Out[1][j] = placeholderTxt[i];
                        i++;
                    }
                }
            }
        }
    }

    void printBox(){
        if(visible){
            cout << "\033[" << startY << ";" << startX << "H";
            cout << "\033[7m";
            if(selected)
                cout << "\033[44m";
            for(unsigned int i=0; i<lenY; i++){
                for(unsigned int j=0; j<lenX; j++){
                    cout << Out[i][j];
                }
                cout << "\033[1B" << "\033[" << lenX << "D";
            }
            cout << "\033[0m";
        }
    }

    int getStartX(){
        return startX;
    }

    int getStartY(){
        return startY;
    }

    int getLen(){
        return lenX;
    }

    bool isVisible(){
        return visible;
    }

    void setVisible(bool _visible){
        visible = _visible;
    }

    void setT(Box *box){
        T = box;
    }

    void setR(Box *box){
        R = box;
    }

    void setB(Box *box){
        B = box;
    }

    void setL(Box *box){
        L = box;
    }

    string getType(){
        return type;
    }

    void doAction(){
        changeLang();
    }

    ~LangBox(){
        if (Out != nullptr) {
            for (unsigned int i = 0; i < lenY; ++i) {
                delete[] Out[i];
            }
            delete[] Out;
        }
    }
};

class GUI{
private:
    string name;
    Box** boxes;
    int box_amount, currentBoxes;
    char GUI_OUT[GUIY][GUIX];
public:
    GUI(){}

    GUI(string GUI_name, unsigned int _box_amount){
        name = GUI_name;
        box_amount = _box_amount;
        currentBoxes = 0;
        boxes = new Box*[box_amount];
        for(int i=0; i<box_amount; i++){
            boxes[i] = nullptr;
        }

        generateGUI();
    }

    GUI& operator=(const GUI& gui){
        name = gui.name;
        box_amount = gui.box_amount;
        currentBoxes = 0;
        boxes = new Box*[box_amount];
        for(int i=0; i<box_amount; i++){
            boxes[i] = nullptr;
        }

        generateGUI();
    }

    string getName(){
        return name;
    }

    void printGUI(){
        cout << "\033[7m";
        for(unsigned int i=0; i<GUIY; i++){
            for(unsigned int j=0; j<GUIX; j++){
                if(GUI_OUT[i][j] == '#')
                    cout << "\033[0;30;40m" << GUI_OUT[i][j] << "\033[0;7m";
                else
                    cout<<GUI_OUT[i][j];
            }
            cout<<endl;
        }
        cout << "\033[0m" << endl;

        for(unsigned int i=0; i<box_amount; i++){
            if(boxes[i]!=nullptr)
                boxes[i]->printBox();
        }
    }

    void UpdateGUI(){
        for(int i=0; i<box_amount; i++)
            boxes[i]->setOutputText();
        printGUI();
    }

    void generateGUI(){
        if(name == "START")
            setStartGUI();
        else{
            for(unsigned int i=0; i<GUIY; i++){
                for(unsigned int j=0; j<GUIX; j++){
                    GUI_OUT[i][j] = EmptyGUI[i][j];
                }
            }
        }
    }

    void addBox(Box *box){
        boxes[currentBoxes] = box;
        currentBoxes++;
        //generateBox(box);
    }

    void setStartGUI(){
        for(unsigned int i=0; i<GUIY; i++){
            for(unsigned int j=0; j<GUIX; j++){
                GUI_OUT[i][j] = StartGUI[i][j];
            }
        }
    }

    void setBoxVisible(unsigned int boxNumber, bool visible){
        boxes[boxNumber]->setVisible(visible);
        //generateBox(boxes[boxNumber]);
    }

    Box *getBox(int number){
        return boxes[number];
    }

    void setBoxNeighbor(unsigned int boxNumber, char side, Box *box){
        switch(side){
            case 'T':
                boxes[boxNumber]->setT(box);
                break;
            case 'B':
                boxes[boxNumber]->setB(box);
                break;
            case 'R':
                boxes[boxNumber]->setR(box);
                break;
            case 'L':
                boxes[boxNumber]->setL(box);
                break;
        }
    }

    void showError(map<string, string> err){
        boxes[2]->setText(err);
    }

    ~GUI(){}
};

///---------------------------------GUIS AND BUTTON------------------------------------------------------------------------------------------------------------------------------------------------

GUI *currentGUI;
Box *currentBox;

GUI *Start;
GUI *InsertCard;
GUI *Choice;

GUI *Deposit;
GUI *MoneyToDeposit;

GUI *Withdraw;
GUI *MoneyToWithdraw;
GUI *CustomWithdraw;

GUI *TakeOutCard;

///---------------------------------ACTIONS 2------------------------------------------------------------------------------------------------------------------------------------------------------

void ChangeGUIToStart(){
    currentGUI = Start;
    currentBox->setSelect(false);
    currentBox = currentGUI->getBox(0);
    currentBox->setSelect(true);
}

void ChangeGUIToInsertCard(){
    currentGUI = InsertCard;
    currentBox->setSelect(false);
    currentBox = currentGUI->getBox(0);
    currentBox->setSelect(true);
}

void ChangeGUIToChoice(){
    currentGUI = Choice;
    currentBox->setSelect(false);
    currentBox = currentGUI->getBox(0);
    currentBox->setSelect(true);
}

void ChangeGUIToDeposit(){
    currentGUI = Deposit;
    currentBox->setSelect(false);
    currentBox = currentGUI->getBox(0);
    currentBox->setSelect(true);
}


void CardInput(string number){
    // Check if card is in database.
    string card = "1221";   //  Temp number


    if(card == number){
        currentGUI->showError(insertCardText);
        ChangeGUIToChoice();
    }
    else{
        currentGUI->showError(wrongNumberText);
    }
}


void placeholderAction(){}
void placeholderAction2(string){}

///---------------------------------SETUP---------------------------------------------------------------------------------------------------------------------------------------------------------

GUI *setupStartGUI(){

    GUI *Start = new GUI("START", 3);
    Button *insertButton = new Button(16, 10, 17);
    Button *adminButton = new Button(16, 13, 17, true, nullptr, nullptr, nullptr, nullptr, false, true, true);
    LangBox *lang = new LangBox(35, 10, 6);

    insertButton->setText(insertCardText);
    insertButton->setButtonAction(ChangeGUIToInsertCard);
    insertButton->setOutput();

    adminButton->setText(adminText);
    adminButton->setButtonAction(placeholderAction);
    adminButton->setOutput();

    Start->addBox(insertButton);
    Start->addBox(adminButton);
    Start->addBox(lang);

    Start->setBoxNeighbor(0, 'B', Start->getBox(1));
    Start->setBoxNeighbor(1, 'T', Start->getBox(0));
    Start->setBoxNeighbor(0, 'R', Start->getBox(2));
    Start->setBoxNeighbor(2, 'L', Start->getBox(0));

    return Start;
}

GUI *setupInsertCardGUI(){
    GUI *Insert = new GUI("INSERT_CARD", 3);
    TextBox *cardTextBox = new TextBox(6, 6, 37, true, nullptr, nullptr, nullptr, nullptr, true, false, false);
    TextLabel *cardTextLabel = new TextLabel(16, 10, 17, false, nullptr, nullptr, nullptr, nullptr);
    Button *backToStart = new Button(16, 13, 17, true, nullptr, nullptr, nullptr, nullptr, true);

    cardTextBox->setText(insertCardText);
    cardTextBox->setOutput();

    cardTextLabel->setPlaceholderText(cardNumberText);
    cardTextLabel->setTextLabelAction(CardInput);
    cardTextLabel->setOutput();

    backToStart->setText(backText);
    backToStart->setButtonAction(ChangeGUIToStart);
    backToStart->setOutput();

    Insert->addBox(cardTextLabel);
    Insert->addBox(backToStart);
    Insert->addBox(cardTextBox);

    Insert->setBoxNeighbor(0, 'B', Insert->getBox(1));
    Insert->setBoxNeighbor(1, 'T', Insert->getBox(0));

    return Insert;
}

GUI *setupChoiceGUI(){
    GUI *Choice = new GUI("CHOICE", 3);
    Button *withdrawButton = new Button(9, 10, 14, true, nullptr, nullptr, nullptr, nullptr);
    Button *depositButton = new Button(26, 10, 14, true, nullptr, nullptr, nullptr, nullptr);
    Button *backToStart = new Button(18, 14, 13, true, nullptr, nullptr, nullptr, nullptr);

    depositButton->setText(depositText);
    depositButton->setButtonAction(ChangeGUIToDeposit);
    depositButton->setOutput();

    withdrawButton->setText(withdrawText);
    withdrawButton->setButtonAction(placeholderAction);
    withdrawButton->setOutput();

    backToStart->setText(exitText);
    backToStart->setButtonAction(ChangeGUIToStart);
    backToStart->setOutput();

    Choice->addBox(withdrawButton);
    Choice->addBox(depositButton);
    Choice->addBox(backToStart);

    Choice->setBoxNeighbor(0, 'R', Choice->getBox(1));
    Choice->setBoxNeighbor(1, 'L', Choice->getBox(0));
    Choice->setBoxNeighbor(0, 'B', Choice->getBox(2));
    Choice->setBoxNeighbor(1, 'B', Choice->getBox(2));
    Choice->setBoxNeighbor(2, 'T', Choice->getBox(0));

    return Choice;
}

GUI *setupDepositGUI(){
    GUI *Insert = new GUI("DEPOSIT", 3);
    TextBox *depositMoney = new TextBox(6, 6, 37, true, nullptr, nullptr, nullptr, nullptr, true, false, false);
    TextLabel *money = new TextLabel(16, 10, 17, false, nullptr, nullptr, nullptr, nullptr);
    Button *backToStart = new Button(16, 13, 17, true, nullptr, nullptr, nullptr, nullptr, true);

    depositMoney->setText(depositMoneyText);
    depositMoney->setOutput();

    money->setPlaceholderText(insertMoneyText);
    money->setTextLabelAction(placeholderAction2);
    money->setOutput();

    backToStart->setText(backText);
    backToStart->setButtonAction(ChangeGUIToStart);
    backToStart->setOutput();

    Insert->addBox(money);
    Insert->addBox(backToStart);
    Insert->addBox(depositMoney);

    Insert->setBoxNeighbor(0, 'B', Insert->getBox(1));
    Insert->setBoxNeighbor(1, 'T', Insert->getBox(0));

    return Insert;
}


void SETUP_TEXTS(){

// insertCardText
insertCardText["EN"] = "INSERT CARD";
insertCardText["PL"] = "WLOZ KARTE";

// adminText
adminText["EN"] = "ADMIN";
adminText["PL"] = "ADMIN";

// withdrawText
withdrawText["EN"] = "WITHDRAW";
withdrawText["PL"] = "WYPLAC";

// depositText
depositText["EN"] = "DEOPSIT";
depositText["PL"] = "WPLAC";

// exitText
exitText["EN"] = "EXIT";
exitText["PL"] = "WYJDZ";

// backText
backText["EN"] = "BACK";
backText["PL"] = "WROC";

// cardNumberText
cardNumberText["EN"] = "CARD NUMBER";
cardNumberText["PL"] = "NUMER KARTY";

// wrongNumberText
wrongNumberText["EN"] = "INCORRECT NUMBER";
wrongNumberText["PL"] = "NIEPOPRAWNY NUMER";

// depositMoneyText
depositMoneyText["EN"] = "INCORRECT NUMBER";
depositMoneyText["PL"] = "NIEPOPRAWNY NUMER";

// insertMoneyText
insertMoneyText["EN"] = "INCORRECT NUMBER";
insertMoneyText["PL"] = "NIEPOPRAWNY NUMER";
}

void SETUP(){
    cout<<"Setting up ATM:"<<endl<<endl;

    cout<<"Setting texts:";
    SETUP_TEXTS();
    cout<<" - done"<<endl;

    cout<<"StartGUI";
    Start = setupStartGUI();
    cout<<" - done"<<endl<<"InputCardGUI";
    InsertCard = setupInsertCardGUI();
    cout<<" - done"<<endl<<"ChoiceGUI";
    Choice = setupChoiceGUI();
    cout<<" - done"<<endl<<"DepositGUI";
    Deposit = setupDepositGUI();
    cout<<" - done"<<endl;

    cout<<"Setting starting values";
    currentGUI = Start;
    currentBox = currentGUI->getBox(0);
    cout<<currentBox->getText();
    currentBox->setSelect(true);
    cout<<" - done"<<endl;
}

///---------------------------------MAIN PROGRAM---------------------------------------------------------------------------------------------------------------------------------------------------

int main(){

    SETUP();

    string backgroundInput = "", admin = "admin", stop = "stop";

    int ic;
    char cc;
    do{
        cout << "\033[H";
        currentGUI->UpdateGUI();
        cout << "\033[H\033[21B";
        cout << "[" << backgroundInput << "]" << endl;

        while(!_kbhit()){}
        ic = _getch();
        cc = ic;
        switch(ic)
        {
        case 224:  // Arrows
            switch (_getch())
            {
            case 72: // Up
                currentBox->setSelect(false);
                currentBox = currentBox->Switch('T');
                currentBox->setSelect(true);
                break;
            case 80: // Down
                currentBox->setSelect(false);
                currentBox = currentBox->Switch('B');
                currentBox->setSelect(true);
                break;
            case 75: // Left
                currentBox->setSelect(false);
                currentBox = currentBox->Switch('L');
                currentBox->setSelect(true);
                break;
            case 77: // Right
                currentBox->setSelect(false);
                currentBox = currentBox->Switch('R');
                currentBox->setSelect(true);
                break;
            default:
                cout<<"Cannot identify arrow.";
                break;
            }
        default:
            if(ic == 13){   //  Enter
                currentBox->doAction();
            }

            else if(ic >= 47 && ic <= 57){  // 0-9
                if(currentBox->getType() == "TextLabel"){
                    currentBox->inputText(cc);
                }
                else{
                    backgroundInput = backgroundInput + cc;
                }
            }

            else if(ic >= 97 && ic <= 122){ //  a-z
                backgroundInput = backgroundInput + cc;
            }

            else if(ic >= 65 && ic <= 90){ //  A-Z
                backgroundInput = backgroundInput + (char)(ic + 32);
            }

            else if(ic == 8){   //  Backspace
                if(currentBox->getType() == "TextLabel"){
                    if(currentBox->getInputedText().length()>0)
                        currentBox->subInputText();
                }
                else{
                    if(backgroundInput.length()>0)
                        backgroundInput.pop_back();
                }
            }
            break;
        }

        if(backgroundInput == admin){
            if(currentGUI->getName() == "START"){
                currentGUI->setBoxVisible(1, true);
                backgroundInput = cc;
            }
        }

        else{
            if(!(stop.find(backgroundInput) != string::npos)){
                if(!(admin.find(backgroundInput) != string::npos))
                    backgroundInput = cc;
            }
        }
    }
    while(backgroundInput != "stop");

    return 0;
}

